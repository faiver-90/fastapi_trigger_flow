"""'change db fields'

Revision ID: 232d3732ab43
Revises: e00d90643836
Create Date: 2025-10-24 12:54:42.050774

"""

from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "232d3732ab43"
down_revision: Union[str, None] = "e00d90643836"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column("rules", "user_id", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("rules", "source_id", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("rules", "trigger_id", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("rules", "is_active", existing_type=sa.BOOLEAN(), nullable=True)
    op.drop_constraint(op.f("uq_rules_user_source_trigger"), "rules", type_="unique")
    op.create_unique_constraint(None, "rules", ["user_notification_ids"])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "rules", type_="unique")
    op.create_unique_constraint(
        op.f("uq_rules_user_source_trigger"),
        "rules",
        ["user_id", "source_id", "trigger_id"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column("rules", "is_active", existing_type=sa.BOOLEAN(), nullable=False)
    op.alter_column("rules", "trigger_id", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column("rules", "source_id", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column("rules", "user_id", existing_type=sa.INTEGER(), nullable=False)
    # ### end Alembic commands ###
